import tkinter as tk
from tkinter import ttk, Label, PhotoImage
from tkinter import *
import json
import tkinter.messagebox as messagebox
from tkinter import ttk

class Ordem():
      #----cores----
    __gray        = '#a7acb6' #cinza
    __gray_one    = '#333333' #cinza denovo
    def __init__(self):

        self.tela = Tk()
        self.tela.geometry('430x580')
        #self.tela.resizable(width=FALSE, height=FALSE)
        self.img = PhotoImage(file=r'C:\Users\balanca.algodoeira\Desktop\waiting\frontend.png')
        
          #frames
        
        self.frame_tela = Label(self.tela, image= self.img)
        self.frame_tela.pack()
        self.tabela_frame = Frame(self.tela)
        self.tabela_frame.pack()

         #botoes
        self.add_button = Button(text ='Add', width= 10, bd = 0, command=self.add, bg= 'black', fg= 'white')
        self.add_button.place( x= 42, y= 486, height=20)
        self.deletar_button = Button(text = 'Delete', width= 10, bd= 0, command= self.delete, bg= 'black', fg='white')
        self.deletar_button.place(x = 188, y= 486, height=20)
        self.atualiza_button = Button(text= 'Atualizar', width=10, bd= 0, command = self.att, bg = 'black', fg= 'white')
        self.atualiza_button.place( x = 330, y = 486, height=20)

        #Label  e entry para dados da função de Add
        self.placa_label = Label(text= 'Placa', width=10, bd=0, bg= 'black', fg = 'white')
        self.placa_label.place(x = 109, y= 516, height= 20)
        self.placa_ent = Entry(bg='black', fg='white', width=20, bd=2)
        self.placa_ent.place(x= 212, y=517 )

        self.transportadora = Label(text = 'Transp', bd=0, width=10, bg= 'black', fg= 'white')
        self.transportadora.place( x= 108, y= 555 )
        self.transp_ent = Entry(bg= 'black', fg='white', bd= 2)
        self.transp_ent.place(x =211 , y = 556, height=20 )

        #tabelas Treeview. Tem vida própria. Não entendi o motivo mas só funciona se o frame for o usado. Não consigo movimentar ela direito.
        self.tabela = ttk.Treeview(self.tela, columns=("plate", "transp"), show='headings')
        self.tabela.place(x = 10, y = 0)
        self.tabela.heading("plate", text="Plate")
        self.tabela.heading("transp", text="Transp")

        
        
        self.tabela.bind("<Double-1>", self.on_select)
        self.load_data()
        # deixa a tela sempre em primeiro plano( para ediçao de imagem) self.tela.attributes("-topmost", True)
        self.tela.mainloop()

   #carrega informaçoes
    def load_data(self):
            with open('trucks.json') as json_file:
                data = json.load(json_file)
                for truck in data["trucks"]:
                    self.tabela.insert("", "end", values=(truck["plate"], truck["transp"]))

   #funcao para adicionar
    def add(self):
            placa = self.placa_ent.get()
            transp = self.transp_ent.get()
            if not placa or not transp:
                messagebox.showerror("Erro", "Por favor, preencha todos os campos.")
                return
            self.save()
            self.placa_ent.delete(0, END)
            self.transp_ent.delete(0, END)

    # funcao para atualizar tabela
    def att(self):
        self.tabela.delete(*self.tabela.get_children()) #limpa os dados atuais da tabela
        with open('trucks.json') as json_file:
            data = json.load(json_file)
            for truck in data["trucks"]:
                self.tabela.insert("", "end", values=(truck["plate"], truck["transp"]))

    # funcao de save
    def save(self):
        placa = self.placa_ent.get()
        transp = self.transp_ent.get()
        truck = {"plate": placa, "transp": transp}
        try:
            with open('trucks.json') as json_file:
                data = json.load(json_file)
                data["trucks"].append(truck)
            with open('trucks.json', 'w') as json_file:
                json.dump(data, json_file, indent=4)
        except:
            data = {"trucks": [truck]}
            with open('trucks.json', 'a') as json_file:
                json.dump(data, json_file, indent=4)
                  
        #------grande dor de cabeça, caso as informaçoes selecionadas forem de type 'int' 
        # ele vai deletar da tabela, mas ao atualizar ou reiniciar o programa, as informaçoes irao voltar. meu deus eu odeio isso 
    def delete(self):
        selected_item = self.tabela.selection()[0]
        plate = self.tabela.item(selected_item)['values'][0]
        transp = self.tabela.item(selected_item)['values'][1]
                    
        with open(r'trucks.json', 'r') as json_file:
            data = json.load(json_file)
            for i, truck in enumerate(data["trucks"]):
                print('deletados os', plate, truck)
                if truck["plate"]==plate and truck["transp"]==transp:
                    data["trucks"].pop(i)
                    print('deletados os', plate, truck)
                    with open('trucks.json', 'w') as json_file:
                        json.dump(data, json_file, indent=4)
        json_file.close()
        self.tabela.delete(selected_item)
   
    def on_select(self, event):
        self.tabela.config(selectmode= 'browse') # torna a tabela editável
        selected_item = self.tabela.selection()[0]
        new_value = self.tabela.item(selected_item)['values']
        self.tabela.set(selected_item, column=0, value=new_value[0])
        self.tabela.set(selected_item, column=1, value=new_value[1])
        self.tabela.config(selectmode='none') # desabilita a edição  


program = Ordem()
